{"version":3,"sources":["services/weatherService.js","modules/weather-display/weather.js","modules/search-form/form.js","App.js","reportWebVitals.js","index.js"],"names":["BASE_API_URL","CORS_URL","keyword","a","_getLocationId","locationId","_getWeatherByLocationId","weather","console","log","fetch","response","json","result","location","woeid","fetchWeather","weatherDisplay","className","title","parent","consolidated_weather","weather_state_name","searchForm","props","type","required","placeholder","value","onChange","e","onKeywordChange","target","onClick","preventDefault","onHandleSubmit","App","useState","setKeyword","currentWeather","setCurrentWeather","searchCity","weatherService","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAAMA,G,MAAe,4CACfC,EAAW,wC,4CAGjB,WAA4BC,GAA5B,iBAAAC,EAAA,+EAIiCC,EAAeF,GAJhD,cAIcG,EAJd,gBAM8BC,EAAwBD,GANtD,cAMcE,EANd,yBAOeA,GAPf,kCASQC,QAAQC,IAAI,mCAAZ,MATR,2D,+BAceH,E,8EAAf,WAAuCD,GAAvC,iBAAAF,EAAA,sEAC2BO,MAAM,GAAD,OAAIT,EAAJ,YAAgBD,EAAhB,YAAgCK,IADhE,cACUM,EADV,gBAEyBA,EAASC,OAFlC,cAEUC,EAFV,yBAGWA,GAHX,4C,+BAMeT,E,8EAAf,WAA8BF,GAA9B,iBAAAC,EAAA,sEAC2BO,MAAM,GAAD,OAAIT,EAAJ,YAAgBD,EAAhB,0BAA8CE,IAD9E,cACUS,EADV,gBAE2BA,EAASC,OAFpC,cAEUE,EAFV,yBAGWA,EAAS,GAAGC,OAHvB,4C,sBAOe,OACXC,a,4DClBWC,EAZQ,SAAC,GAAe,IAAdV,EAAa,EAAbA,QACrB,OACI,sBAAKW,UAAU,kBAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,uBAAMA,UAAU,WAAhB,UAA4BX,EAAQY,MAApC,QACA,sBAAMD,UAAU,kBAAhB,SAAmCX,EAAQa,OAAOD,WAEtD,sBAAMD,UAAU,UAAhB,SAA2BX,EAAQc,qBAAqB,GAAGC,yBCaxDC,EAtBI,SAACC,GAEhB,IAAMtB,EAAUsB,EAAMtB,QAUtB,OACI,qBAAKgB,UAAU,SAAf,SACI,iCACI,uBAAOO,KAAK,OAAOC,UAAQ,EAACC,YAAY,YAAYC,MAAO1B,EAAS2B,SAX3D,SAACC,GAClBN,EAAMO,gBAAgBD,EAAEE,OAAOJ,UAWvB,wBAAQK,QARC,SAACH,GAClBA,EAAEI,iBACFV,EAAMW,eAAejC,IAMb,0BCWDkC,MArBf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENnC,EAFM,KAEGoC,EAFH,OAG+BD,mBAAS,MAHxC,mBAGNE,EAHM,KAGUC,EAHV,KAIPC,EAAU,uCAAG,WAAOvC,GAAP,eAAAC,EAAA,sEACKuC,EAAe1B,aAAad,GADjC,OACXK,EADW,OAEjBC,QAAQC,IAAIF,GACZiC,EAAkBjC,GAHD,2CAAH,sDAMhB,OACE,sBAAKW,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CAAYhB,QAASA,EAAS6B,gBAAiBO,EAAYH,eAAgBM,IAE1EF,GAAkB,cAAC,EAAD,CAAgBhC,QAASgC,SAC1BI,IAAjBJ,GAA8B,gECVtBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.86027f76.chunk.js","sourcesContent":["const BASE_API_URL = 'https://www.metaweather.com/api/location';\r\nconst CORS_URL = 'http://ml-cors-anywhere.herokuapp.com';\r\n\r\n\r\nasync function fetchWeather(keyword) {\r\n\r\n    try {\r\n        // get location id by keyword search\r\n        const locationId = await _getLocationId(keyword)\r\n        // api request by location id to get weather data object\r\n        const weather = await _getWeatherByLocationId(locationId)\r\n        return weather\r\n    } catch (err) {\r\n        console.log('unable to reach meta weather api', err)\r\n    }\r\n\r\n}\r\n\r\nasync function _getWeatherByLocationId(locationId) {\r\n    const response = await fetch(`${CORS_URL}/${BASE_API_URL}/${locationId}`)\r\n    const result = await response.json()\r\n    return result\r\n}\r\n\r\nasync function _getLocationId(keyword) {\r\n    const response = await fetch(`${CORS_URL}/${BASE_API_URL}/search/?query=${keyword}`)\r\n    const location = await response.json()\r\n    return location[0].woeid\r\n}\r\n\r\n\r\nexport default {\r\n    fetchWeather\r\n}","import './weather.css'\r\n\r\nconst weatherDisplay = ({weather}) => {\r\n    return (\r\n        <div className=\"weather-display\">\r\n            <div className=\"location-container\">\r\n                <span className=\"location\">{weather.title}, </span>\r\n                <span className=\"location-parent\">{weather.parent.title}</span>\r\n            </div>\r\n            <span className=\"weather\">{weather.consolidated_weather[0].weather_state_name}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default weatherDisplay","const searchForm = (props) => {\r\n\r\n    const keyword = props.keyword\r\n\r\n    const handleChange = (e) => {\r\n        props.onKeywordChange(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        props.onHandleSubmit(keyword)\r\n    }\r\n    return (\r\n        <div className=\"search\">\r\n            <form>\r\n                <input type=\"text\" required placeholder=\"city name\" value={keyword} onChange={handleChange} />\r\n                <button onClick={handleSubmit}>Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default searchForm","import './App.css';\nimport { useState } from 'react'\nimport weatherService from './services/weatherService'\nimport WeatherDisplay from './modules/weather-display/weather'\nimport SearchForm from './modules/search-form/form'\n\nfunction App() {\n\n  const [keyword, setKeyword] = useState('')\n  const [currentWeather, setCurrentWeather] = useState(null)\n  const searchCity = async (keyword) => {\n    const weather = await weatherService.fetchWeather(keyword)\n    console.log(weather)\n    setCurrentWeather(weather)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Basic Weather App</h1>\n      <SearchForm keyword={keyword} onKeywordChange={setKeyword} onHandleSubmit={searchCity}/>\n      \n      {currentWeather && <WeatherDisplay weather={currentWeather}/> }\n      {currentWeather===undefined && <p>Unable to find your request</p>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}